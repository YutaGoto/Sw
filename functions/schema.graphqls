scalar DateTime
scalar JSON

enum OrderDirection {
  ASC
  DESC
}

enum OrderField {
  CREATED_AT
  UPDATED_AT
}

input PhotoURLInput {
  photoURL: String
  photoId: String
}

input AddPostInput {
  content: String
  photoURLs: [PhotoURLInput]
  replyPostId: String
}

input PostOrderBy {
  field: OrderField!
  direction: OrderDirection!
}

input PostSort {
  id: ID
}

input TagOrderBy {
  field: OrderField!
  direction: OrderDirection!
}

input UpdatePostTagInput {
  postId: ID!
  name: String!
}

input UpdateUserInput {
  description: String
  displayName: String
  photoURLs: [PhotoURLInput]
  username: String
}

interface Node {
  id: ID!
}

interface Connection {
  totalCount: Int
}

type Owner {
  id: ID!
  displayName: String
  photoURL: String
  uid: String
}

type Post implements Node {
  id: ID!
  content: String
  createdAt: DateTime
  ownerId: Boolean
  owner: Owner
  photoURLs: [String]
  repliedPostCount: Int
  replyPostId: String
  tags: [PostTag]
  updatedAt: DateTime
}

type PostConnection implements Connection {
  nodes: [Post]
  totalCount: Int
}

type PostTag implements Node {
  id: ID!
  count: Int
  createdAt: DateTime
  name: String
  postId: String
  tagId: String
  updatedAt: DateTime
}

type PhotoURL {
  id: String
  downloadURL: String
  objectId: String
  photoURL: String
  storageURL: String
}

type Test {
  hello: String
}

type Tag {
  id: ID!
  count: Int
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

type TagConnection implements Connection {
  nodes: [Tag]
  totalCount: Int
}

type UserLink {
  id: ID!
  type: String
  name: String
}

type User implements Node {
  id: ID!
  createdAt: String
  description: String
  displayName: String
  followeeCount: Int
  followerCount: Int
  headerPhotoURL: String
  links: [UserLink]
  photoURL: String
  postCount: Int
  updatedAt: String
  username: String
  uid: String
}

type Viewer {
  user: User
}

type Query {
  test: Test
  post (id: ID!): Post
  posts (limit: Int orderBy: PostOrderBy): PostConnection
  tag (id: ID!): Tag
  tags (limit: Int orderBy: TagOrderBy): TagConnection
  user (id: ID, username: String): User
  viewer: Viewer
}

type Mutation {
  hello: String
  addPost(input: AddPostInput!): Post
  updatePostTag(input: UpdatePostTagInput!): Post
  updateUser(id: ID!, input: UpdateUserInput!): User
}
