scalar DateTime
scalar JSON

enum OrderDirection {
  ASC
  DESC
}

enum OrderField {
  CREATED_AT
  UPDATED_AT
}

input PostOrderBy {
  field: OrderField!
  direction: OrderDirection!
}

input PostSort {
  id: ID
}

input TagOrderBy {
  field: OrderField!
  direction: OrderDirection!
}

interface Node {
  id: ID!
}

interface Connection {
  totalCount: Int
}

type Owner {
  displayName: String
  photoURL: String
  uid: String
}

type Post implements Node {
  content: String
  createdAt: DateTime
  id: ID!
  owner: Owner
  photoURL: PhotoURL
  photoURLs: [PhotoURL]
  repliedPostIds: [String]
  replyPostIds: String
  tags: [Tag]
  updatedAt: DateTime
}

type PostConnection implements Connection {
  nodes: [Post]
  totalCount: Int
}

type PhotoURL {
  xx256: String
  xx512: String
  xx1024: String
  x512: String
  x1024: String
  x2048: String
}

type Test {
  hello: String
}

type Tag {
  count: Int
  createdAt: DateTime
  id: ID!
  name: String
  updatedAt: DateTime
}

type TagConnection implements Connection {
  nodes: [Tag]
  totalCount: Int
}

type UserLink {
  type: String
  name: String
  id: String
}

type User implements Node {
  createdAt: String
  description: String
  displayName: String
  followeeCount: Int
  followerCount: Int
  headerPhotoURL: String
  id: ID!
  links: [UserLink]
  photoURL: String
  postCount: Int
  updatedAt: String
}

type Viewer {
  user: User
}

type Query {
  test: Test

  post (id: ID!): Post

  posts (limit: Int orderBy: PostOrderBy): PostConnection

  tag (id: ID!): Tag

  tags (limit: Int orderBy: TagOrderBy): TagConnection

  user (id: ID!): User

  viewer: Viewer
}

type Mutation {
  hello: String

  updatePostTag(id: String!, name: String): Post
}
